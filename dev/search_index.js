var documenterSearchIndex = {"docs":
[{"location":"structures/#Structures","page":"Structures","title":"Structures","text":"","category":"section"},{"location":"structures/","page":"Structures","title":"Structures","text":"This first example illustrates some of the simplicity and flexibility of using Makie for working with 3D  data. Use the BioStructures package to load a protein structure from the Protein Data Bank (PDB).","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"using Pkg # hide\nPkg.activate() # hide\nusing BioStructures\nstruc = retrievepdb(\"2vb1\")","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"Collect its atoms and make a 3D scatter plot. The meshscatter function returns a Makie FigureAxisPlot.  The easiest way to work with a FigureAxisPlot is to specify variable names for the returned objects.  These include the figure, the axis or scene, and what we just plotted onto it.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"atms = collectatoms(struc);\ncords = coordarray(atms);\nmeshfig, ax, plt = meshscatter(cords; show_axis = false, resolution = (800,600))","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"You can also create the Figure first and then plot onto it.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; show_axis = false)\nfig","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"Besides the excellent layouting capabilities, the real magic of Makie is in the Observable system.  Makie Observables are variables that other variables can listen to. Wrap the atom coordinates in  an Observable before plotting them so that the plotting machinery will be able to respond. You can  include more Observables for things like sliders and other controllers. Make the atom radius into an  Observable and pass it to meshscatter as markersize.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"There are at least 2 ways to make an Observable:","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"cords = coordarray(atms) |> Observable\natmrad = Observable(0.5)","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"Here we do the same thing to make the Figure but we pass the plotting function our Observables, so  that we can manipulate things later.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; markersize = atmrad, show_axis = false)\nfig","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"Now that we have the Figure, we can add more to it. Since we used a Observable to display the coordinates  for the meshscatter, and a Observable for atom radius, let's add a slider to control the radius. The  labelslider! and labelslidergrid! functions can do this for one or multiple sliders, respectively. To set  a starting value, use set_close_to! on the labelslider's slider field.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"radius = labelslider!(fig[1,end], \"atom radius\", 0.1:0.1:3.0;\n                    startval = 1.0, format = x->\"$(x) â„«\", width = 250, tellwidth = true, tellheight = false\n)\nfig[1,end+1] = radius.layout\nset_close_to!(radius.slider, 1.0)","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"To make it update the radius in the plot, we can set the atom radius to be the value of the slider.","category":"page"},{"location":"structures/","page":"Structures","title":"Structures","text":"on(radius.slider.value) do s\n   atmrad[] = s\nend","category":"page"},{"location":"#BioMakie.jl","page":"Home","title":"BioMakie.jl","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia is required. This package is being developed with Julia 1.7, so some features may not work  if an earlier version is used. Install the BioMakie master branch from the Julia REPL. Enter the  package mode by pressing ] and run add BioMakie#master.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some examples are shown below, but refer to the rest of the documentation for a more in-depth look. To view a PDB structure, just use the plot function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BioStructures\nstruc = retrievepdb(\"2vb1\", dir = \"data\\\\\") |> Observable\nsv = plot(struc)\n\nstruc = read(\"data\\\\2vb1_mutant1.pdb\", BioStructures.PDB) |> Observable\nsv = plot(struc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\"><img width=\"530\" height=\"600\" src=\"docs/assets/struc.png\"></p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"To view a multiple sequence alignment, use the plot function with a Pfam MSA or fasta file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MIToS.MSA\ndownloadpfam(\"pf00062\")\nvm = MIToS.MSA.read(\"pf00062.stockholm.gz\",Stockholm) |> Observable\nfig1 = plot(vm)\n\nusing FastaIO\nvm = FastaIO.readfasta(\"data/fasta1.fas\") |> Observable\nfig1 = plot(vm)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: pf00062x)","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome. Just open an issue or a pull request on github, or take a look at the roadmap.","category":"page"}]
}
