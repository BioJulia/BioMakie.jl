var documenterSearchIndex = {"docs":
[{"location":"tutorial1/##-Tutorial-1","page":"# Tutorial 1","title":"# Tutorial 1","text":"","category":"section"},{"location":"tutorial1/#Structures","page":"# Tutorial 1","title":"Structures","text":"","category":"section"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"Let's start by loading a protein structure from the Protein Data Bank (PDB) with BioStructures.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"using BioStructures\nstruc = retrievepdb(\"2vb1\")","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"Now let's collect its atoms and make a 3D scatter plot. The meshscatter function returns a Makie FigureAxisPlot. The easiest way to work with those components is to specify variable names for three returned objects. These include the figure, axis or scene, and what we just plotted onto it.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"atms = collectatoms(struc)\ncords = coordarray(atms)\nmeshfig, ax, plt = meshscatter(cords; show_axis = false, resolution = (800,600))","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"We could also have created the Figure first and then plotted onto it.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; show_axis = false)\nfig","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"Besides the excellent layouting capabilities, the real magic of Makie is in the Node system. Makie Nodes are variables that other variables can listen to. Wrap the atom coordinates in a Node before plotting them so that the plotting machinery will be able to respond to manipulations/updates of its value, and other behavior you give it. We can include more Nodes for things like sliders and other controllers. Let's also make the atom radius into a Node and pass it to meshscatter as markersize.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"There are at least 2 ways to make a Node:","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"cords = coordarray(atms) |> Node\natmrad = Node(0.5)","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"Here we do the same thing to make the Figure but we pass the plotting function our Nodes, so that we can manipulate things later.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; markersize = atmrad, show_axis = false)\nfig","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"Now that we have the Figure, we can add more to it. Since we used a Node to display the coordinates for the meshscatter, and a Node for atom radius, let's add a slider to control the radius. The labelslider! and labelslidergrid! functions can do this for one or multiple sliders, respectively. To set a starting value, use set_close_to! on the labelslider's slider field.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"radius = labelslider!(fig[1,end], \"atom radius\", 0.1:0.1:3.0;\n                    startval = 1.0, format = x->\"$(x) Å\", width = 250, tellwidth = true, tellheight = false\n)\nfig[1,end+1] = radius.layout\nset_close_to!(radius.slider, 1.0)","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"To make it update the radius in the plot, we can set the atom radius to be the value of the slider.","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"on(radius.slider.value) do s\n   atmrad[] = s\nend","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"","category":"page"},{"location":"tutorial1/","page":"# Tutorial 1","title":"# Tutorial 1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#BioMakie.jl","page":"BioMakie.jl","title":"BioMakie.jl","text":"","category":"section"},{"location":"#Usage","page":"BioMakie.jl","title":"Usage","text":"","category":"section"},{"location":"#Structures","page":"BioMakie.jl","title":"Structures","text":"","category":"section"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Let's start by loading a protein structure from the Protein Data Bank (PDB) with BioStructures.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Pkg.add(\"BioStructures\") # hide\nusing BioStructures\nstruc = retrievepdb(\"2vb1\")","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Now let's collect its atoms and make a 3D scatter plot. The meshscatter function returns a Makie FigureAxisPlot. The easiest  way to work with those components is to specify variable names for three returned objects. These include the figure, axis or  scene, and what we just plotted onto it.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"atms = collectatoms(struc)\ncords = coordarray(atms)\nmeshfig, ax, plt = meshscatter(cords; \n                                markersize = 1.0, \n                                color = :lightgreen, \n                                show_axis = false, \n                                resolution = (800,600))","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"We could also have created the Figure first and then plotted onto it.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; \n                        markersize = 1.0, \n                        color = :green, \n                        show_axis = false)\nfig","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Besides the excellent layouting capabilities, the real magic of Makie is in the Node system. Makie Nodes are variables that other variables can listen to. Wrap the atom coordinates in a Node before plotting them so that the plotting machinery will be  able to respond to manipulations/updates of its value, and other behavior you give it. We can include more Nodes for things  like sliders and other controllers. Let's also make the atom radius into a Node and pass it to meshscatter as markersize.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"There are at least 2 ways to make a Node:","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"cords = coordarray(atms) |> Node\natmrad = Node(0.5)","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Here we do the same thing to make the Figure but we pass the plotting function our Nodes, so that we can manipulate things later.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; markersize = atmrad, color = :green, show_axis = false)\nfig","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Now that we have the Figure, we can add more to it. Since we used a Node to display the coordinates for the meshscatter,   and a Node for atom radius, let's add a slider to control the radius. The labelslider! and labelslidergrid! functions can  do this for one or multiple sliders. To set a starting value, use set_close_to! on the labelslider's slider field.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"radius = labelslider!(fig[1,end], \"atom radius\", 0.1:0.1:3.0; \n                    startval = 1.0, format = x->\"$(x) Å\", width = 250, tellwidth = true, tellheight = false\n)\nfig[1,end+1] = radius.layout\nset_close_to!(radius.slider, 1.0)","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"To make it update the radius in the plot, we can set the atom radius to be the value of the slider.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"on(radius.slider.value) do s\n   atmrad[] = s \nend","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Let's start by loading a protein structure from the Protein Data Bank (PDB) with BioStructures.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"using BioStructures\nstruc = retrievepdb(\"2vb1\")","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Now let's collect its atoms and make a 3D scatter plot. The meshscatter function returns a Makie FigureAxisPlot. The easiest  way to work with those components is to specify variable names for three returned objects. These include the figure, axis or  scene, and what we just plotted onto it.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"atms = collectatoms(struc)\ncords = coordarray(atms)\nmeshfig, ax, plt = meshscatter(cords; \n                                markersize = 1.0, \n                                color = :lightgreen, \n                                show_axis = false, \n                                resolution = (800,600))","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"We could also have created the Figure first and then plotted onto it.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; \n                        markersize = 1.0, \n                        color = :green, \n                        show_axis = false)\nfig","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Besides the excellent layouting capabilities, the real magic of Makie is in the Node system. Makie Nodes are variables that other variables can listen to. Wrap the atom coordinates in a Node before plotting them so that the plotting machinery will be  able to respond to manipulations/updates of its value, and other behavior you give it. We can include more Nodes for things  like sliders and other controllers. Let's also make the atom radius into a Node and pass it to meshscatter as markersize.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"There are at least 2 ways to make a Node:","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"cords = coordarray(atms) |> Node\natmrad = Node(0.5)","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Here we do the same thing to make the Figure but we pass the plotting function our Nodes, so that we can manipulate things later.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"fig = Figure(resolution = (800,600))\ngrid1 = fig[1:2,1:3] = GridLayout()\nscene1 = LScene(grid1[:,:], scenekw = (camera = cam3d!, raw = false))\nmeshfig = meshscatter!(scene1, cords; markersize = atmrad, color = :green, show_axis = false)\nfig","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"Now that we have the Figure, we can add more to it. Since we used a Node to display the coordinates for the meshscatter,   and a Node for atom radius, let's add a slider to control the radius. The labelslider! and labelslidergrid! functions can  do this for one or multiple sliders. To set a starting value, use set_close_to! on the labelslider's slider field.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"radius = labelslider!(fig[1,end], \"atom radius\", 0.1:0.1:3.0; \n                    startval = 1.0, format = x->\"$(x) Å\", width = 250, tellwidth = true, tellheight = false\n)\nfig[1,end+1] = radius.layout\nset_close_to!(radius.slider, 1.0)","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"To make it update the radius in the plot, we can set the atom radius to be the value of the slider.","category":"page"},{"location":"","page":"BioMakie.jl","title":"BioMakie.jl","text":"on(radius.slider.value) do s\n   atmrad[] = s \nend","category":"page"}]
}
