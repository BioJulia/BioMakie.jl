var documenterSearchIndex = {"docs":
[{"location":"usage/","page":"Usage","title":"Usage","text":"EditURL = \"https://github.com/kool7d/BioMakie.jl/blob/dev/docs/src/usage.jl\"","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The main plotting functions are plotstruc and plotmsa, along with their mutating versions, plotstruc! and plotmsa!. The mutating functions allow the user to add multiple plots to the same Figure, using grid positions.","category":"page"},{"location":"usage/#Structure","page":"Usage","title":"Structure","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"There are different representations for protein structures, including \"ball and stick\" (:ballandstick), \"covalent\" (:covalent), and \"space filling\" (:spacefilling). The default Makie backend is GLMakie.jl, but some of the functions work with WGLMakie.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using BioMakie\nusing GLMakie\nusing BioStructures\nstruc = retrievepdb(\"2vb1\") |> Observable\n# or\nstruc = read(\"2vb1.pdb\", BioStructures.PDB) |> Observable","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fig = Figure()\nplotstruc!(fig, struc; plottype = :ballandstick, gridposition = (1,1), atomcolors = aquacolors, resolution = (350,600))\nplotstruc!(fig, struc; plottype = :covalent, gridposition = (1,2), resolution = (350,600))","category":"page"},{"location":"usage/#Multiple-Sequence-Alignments","page":"Usage","title":"Multiple Sequence Alignments","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Multiple Sequence Alignments (MSAs) are plotted using a matrix of residue letters, and a matrix of values for the heatmap colors. If only a matrix of letters is provided as input, colors will be automatic. MSA objects from MIToS have specific support, as well as Fasta files loaded with FastaIO.jl or FASTX.jl.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"To view a multiple sequence alignment, use the plotmsa or plotmsa! function with a Pfam MSA or fasta file.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using FASTX\nreader = open(FASTX.FASTA.Reader, \"PF00062.fasta\")\nmsa = [reader...] |> Observable\nclose(reader)\n# or\nusing MIToS\nusing MIToS.MSA\nmsa = MIToS.MSA.read(\"pf00062.stockholm.gz\", Stockholm)\n\nfig = plotmsa(msa; colorscheme = :tableau_blue_green, resolution = (700,400))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: msa)","category":"page"},{"location":"usage/#Additional-examples","page":"Usage","title":"Additional examples","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Alpha shapes can be used to visualize the surface of a protein structure","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: alphashape)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This page was generated using Literate.jl.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"EditURL = \"https://github.com/kool7d/BioMakie.jl/blob/dev/docs/src/infotext.jl\"","category":"page"},{"location":"infotext/#Plotting-Information-Text","page":"Info Text","title":"Plotting Information Text","text":"","category":"section"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"In this demo a structure is plotted along with information about the protein and a text box which can take advantage of OpenAI.jl to generate a description from a prompt.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"using BioMakie\nusing BioStructures\nusing GLMakie\nusing OrderedCollections, JSON3","category":"page"},{"location":"infotext/#Acquire-the-data","page":"Info Text","title":"Acquire the data","text":"","category":"section"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"Use BioStructures to retrieve a PDB file, then prepare the plotting data.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"pdb = retrievepdb(\"2vb1\")\npdata = plottingdata(pdb)","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"Get the data from the web database using the associated accession ID and read it.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"getuniprotdata(\"P00698\"; include_refs = true)\ndat = readuniprotdata(\"P00698.json\"; include_refs = true)\ntxtt = uniprotsummary(dat)","category":"page"},{"location":"infotext/#Plot-the-Structure-and-Text","page":"Info Text","title":"Plot the Structure and Text","text":"","category":"section"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"First plot the structure.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"fig = Figure()\nfig = plotstruc!(fig,pdata)","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"Next you can add a textbox which prompts GPT-3.5-turbo to answer questions about the protein (or whatever else). This requires an API key from OpenAI.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"using OpenAI, TextWrap\nENV[\"APIKEY\"] = \"{YOUR API KEY}\"\nmodel = \"gpt-3.5-turbo\"\ntxt = Observable(\"\")\ntbox = Textbox(fig[2,:]; placeholder = \"Ask GPT about this protein...\", width = 500)","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"Use the text box to prompt GPT-3.5-turbo, and make it use the txt Observable.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"on(tbox.stored_string) do t\n        r = create_chat(\n        ENV[\"APIKEY\"],\n        model,\n        [Dict(\"role\" => \"user\", \"content\"=> t)]\n    )\n    txt[] = wrap(r.response[:choices][begin][:message][:content]; width = 75)\nend","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"Finally, plot the text for the protein information and prompt response.","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"ax = Axis(fig[3:4,:])\nGLMakie.text!(ax, txt, fontsize = 16, align = (:left, :top))\nxlims!(ax, (0, 1))\nylims!(ax, (-0.5, 0))\nhidespines!(ax)\nhideydecorations!(ax)\nhidexdecorations!(ax)\n\nax = Axis(fig[1,2])\nGLMakie.text!(ax, txtt, fontsize = 16, align = (:left, :top))\nxlims!(ax, (0, 1))\nylims!(ax, (-0.5, 0))\nhidespines!(ax)\nhideydecorations!(ax)\nhidexdecorations!(ax)","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"","category":"page"},{"location":"infotext/","page":"Info Text","title":"Info Text","text":"This page was generated using Literate.jl.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"EditURL = \"https://github.com/kool7d/BioMakie.jl/blob/dev/docs/src/msaselection.jl\"","category":"page"},{"location":"msaselection/#MSA-Selection","page":"MSA Selection","title":"MSA Selection","text":"","category":"section"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"In this demo we plot an MSA and allow the user to select a residue. The selected residue is highlighted in the MSA and the amino acid frequencies are plotted on the right.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"using BioMakie\nusing MIToS\nusing MIToS.MSA, MIToS.Pfam\nusing GLMakie\nusing Lazy","category":"page"},{"location":"msaselection/#Acquire-the-data","page":"MSA Selection","title":"Acquire the data","text":"","category":"section"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"Use MIToS to download a Pfam MSA, then prepare the plotting data.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"downloadpfam(\"pf00062\")\nmsa1 = MIToS.MSA.read(\"pf00062.stockholm.gz\",Stockholm)\nmsa2 = Observable(msa1)\nplotdata = plottingdata(msa2)","category":"page"},{"location":"msaselection/#Plot-the-MSA","page":"MSA Selection","title":"Plot the MSA","text":"","category":"section"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"fig = Figure(resolution = (1400,400))\nmsa = plotmsa!(fig, plotdata)","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"Prepare column data for the frequency plot. In this example we color based on hydrophobicity value from a set of physicochemical property values, the Kidera factors.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"coldata = lift(plotdata[:selected]) do sel\n    try\n        plotdata[:matrix][][:,parse(Int,sel)]\n    catch\n        [\"-\" for i in 1:size(plotdata[:matrix][])[1]]\n    end\nend\nallaas = [  \"R\", \"M\", \"N\", \"E\", \"F\",\n            \"I\", \"D\", \"L\", \"A\", \"Q\",\n            \"G\", \"C\", \"W\", \"Y\", \"K\",\n            \"P\", \"T\", \"S\", \"V\", \"H\",\n            \"X\", \"-\"]\nsortaas = sortperm(allaas)\nnew_aalabels = allaas[sortaas]\nhydrophobicities = [BioMakie.kideradict[new_aalabels[i]][2] for i in 1:length(new_aalabels)]","category":"page"},{"location":"msaselection/#Create-the-Observables-to-sync-the-data-between-the-MSA-and-the-frequency-plot.","page":"MSA Selection","title":"Create the Observables to sync the data between the MSA and the frequency plot.","text":"","category":"section"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"Utilize observables to update the frequency plot when the user selects a residue.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"countmap1 = @lift frequencies($coldata) |> sort\naas = @lift collect(keys($countmap1))\nfreqs = lift(aas) do a\n    collect(values(countmap1[]))\nend\nmissingaas = @lift setdiff(allaas,$aas) |> sort\nmissingfreqs = @lift zeros(length($missingaas))\nperm1 = @lift sortperm([$aas; $missingaas])\naafreqs = @lift ([freqs[];$missingfreqs])[$perm1]\naafreqspercent = @lift $aafreqs ./ sum($aafreqs) .* 100\nnew_aafreqs = @lift $aafreqspercent[sortaas]","category":"page"},{"location":"msaselection/#Create-the-frequency-plot","page":"MSA Selection","title":"Create the frequency plot","text":"","category":"section"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"The keyword arguments for the Axis and barplot are adjusted to make it look nice.","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"ax = Axis(fig[1,4], xticklabelsize = 16, yticks = (0:10:100), yticklabelsize = 20,\n            title = \"Amino Acid Percentages\",\n            titlesize = 18, xticks = (1:22,new_aalabels)\n)\nbp = barplot!(ax, 1:22, aafreqspercent; color = hydrophobicities, strokewidth = 1,\n                xtickrange=1:22, xticklabels=new_aalabels\n)\nylims!(ax, (0, 100))\nxlims!(ax, (0, 23))","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"","category":"page"},{"location":"msaselection/","page":"MSA Selection","title":"MSA Selection","text":"This page was generated using Literate.jl.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"EditURL = \"https://github.com/kool7d/BioMakie.jl/blob/dev/docs/src/Examples/alphashape.jl\"","category":"page"},{"location":"alphashape/#Alpha-shape-of-a-protein","page":"Mesh","title":"Alpha shape of a protein","text":"","category":"section"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"using BioMakie\nusing GLMakie\nusing GLMakie: Slider\nusing SplitApplyCombine\nusing GeometryBasics\nusing BioStructures","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"SciPy and NumPy are required for this alpha shape algorithm. They need to be installed in your Conda/Python environment.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"using PyCall\nusing Conda\nscipy = pyimport(\"scipy\")\nnp = pyimport(\"numpy\")\ncollections = pyimport(\"collections\")","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Define the alpha shape algorithm.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"py\"\"\"\n    from scipy.spatial import Delaunay\n    import numpy as np\n    from collections import defaultdict\n\n    def alpha_shape_3D(pos, alpha):\n        tetra = Delaunay(pos)\n        tetrapos = np.take(pos,tetra.simplices,axis=0)\n        normsq = np.sum(tetrapos**2,axis=2)[:,:,None]\n        ones = np.ones((tetrapos.shape[0],tetrapos.shape[1],1))\n        a = np.linalg.det(np.concatenate((tetrapos,ones),axis=2))\n        Dx = np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[1,2]],ones),axis=2))\n        Dy = -np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[0,2]],ones),axis=2))\n        Dz = np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[0,1]],ones),axis=2))\n        c = np.linalg.det(np.concatenate((normsq,tetrapos),axis=2))\n        r = np.sqrt(Dx**2+Dy**2+Dz**2-4*a*c)/(2*np.abs(a))\n        tetras = tetra.simplices[r<alpha,:]\n        TriComb = np.array([(0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3)])\n        Triangles = tetras[:,TriComb].reshape(-1,3)\n        Triangles = np.sort(Triangles,axis=1)\n        TrianglesDict = defaultdict(int)\n        for tri in Triangles:\n            TrianglesDict[tuple(tri)] += 1\n        Triangles=np.array([tri for tri in TrianglesDict if TrianglesDict[tri] ==1])\n        EdgeComb=np.array([(0, 1), (0, 2), (1, 2)])\n        Edges=Triangles[:,EdgeComb].reshape(-1,2)\n        Edges=np.sort(Edges,axis=1)\n        Edges=np.unique(Edges,axis=0)\n        Vertices = np.unique(Edges)\n        return Vertices,Edges,Triangles\n    \"\"\"","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Define a function to get the alpha shape of a set of coordinates.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"indexshift(idxs) = (idxs).+=1   # Python is base 0 and Julia is base 1\nfunction getalphashape(coords::Matrix, alpha::T) where {T<:Real}\n    verts,edges,tris = py\"alpha_shape_3D($(coords),$(alpha))\"\n    return [indexshift(verts),indexshift(edges),indexshift(tris)]\nend","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Define a function to get points from spheres at a given radius around coordinates and a function to get line segments from a set of coordinates.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"function getspherepoints(cords::Matrix, radius::Real)\n\tpnts = [GeometryBasics.Point{3,Float64}(cords[i,:]) for i in 1:size(cords,1)] |> Observable\n\tspheres = GeometryBasics.Point{3,Float64}[]\n\n\tlift(pnts) do p\n\t\tfor i in 1:size(p,1)\n\t\t\tsp = GeometryBasics.decompose(GeometryBasics.Point{3,Float64},GeometryBasics.Sphere(p[i],radius),4) |> unique\n\t\t\tfor ii in 1:size(sp,1)\n\t\t\t\tpush!(spheres,sp[ii])\n\t\t\tend\n\t\tend\n\tend\n\n\treturn [[spheres[i].data...] for i in 1:size(spheres,1)] |> combinedims |> transpose |> collect\nend\nfunction linesegs(arr::AbstractArray{T,3}) where T<:AbstractFloat\n    new_arr::AbstractArray{Point3f0} = []\n    for i in 1:size(arr,1)\n        push!(new_arr, Makie.Point3f0(arr[i,1,:]))\n        push!(new_arr, Makie.Point3f0(arr[i,2,:]))\n    end\n    return new_arr |> combinedims |> transpose |> collect\nend","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Load the structure with BioStructures.jl and get a coordinates Observable. Then set up the Figure and Layout.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"struc = retrievepdb(\"2vb1\")\natms = collectatoms(struc, standardselector) |> Observable\ncords = @lift coordarray($atms)' |> collect\nfig = Figure(resolution = (800,600))\nlayout = fig[1,1] = GridLayout(10, 9)","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Add text and interactive elements. It can be helpful to run this line by line to see what is happening.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"strucname = struc.name[1:4]\nsc_scene = layout[1:10,1:6] = LScene(fig; show_axis = false)\nstructxt = layout[1,7:8] = Label(fig, text = \"Structure ID:  $(strucname)\", fontsize = 35)\nalpha1 = layout[5,7:9] = Slider(fig, range = 1.5:0.5:9.0, startvalue = 2.5)\nalphatxt1 = lift(alpha1.value) do s1; string(\"alpha = \", round(s1, sigdigits = 2)); end\nalphatext = layout[4,7:9] = Label(fig, text = alphatxt1, fontsize = 22)\nalphaval = alpha1.value\nradii1 = layout[7,7:9] = Slider(fig, range = 1.5:0.5:9.0, startvalue = 2.5)\nradiixt1 = lift(radii1.value) do s1; string(\"atom radius = \", round(s1, sigdigits = 2)); end\nradiitext = layout[6,7:9] = Label(fig, text = radiixt1, fontsize = 22)\nradiival = radii1.value","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Get the alpha shape of the structure.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"spnts = @lift getspherepoints($cords,$radiival)\nproteinshape = @lift let pnts = $spnts; getalphashape(pnts,$alphaval); end\nalphaverts = @lift $spnts[$(proteinshape)[1],:]\nalphaedges = @lift $spnts[$(proteinshape)[2],:] |> linesegs","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Finally, plot the shape. Moving the sliders will update the plot, but it is slow. You may want to click on the slider rather than dragging it. Speed may be improved in the future.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"linesegments!(sc_scene, alphaedges, color = :gray, transparency = true)","category":"page"},{"location":"alphashape/#Optional/additional-stuff","page":"Mesh","title":"Optional/additional stuff","text":"","category":"section"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"#To show where the atoms are run the following line.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"meshscatter!(sc_scene, cords, markersize = 0.4, color = :blue)","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"#To show the alpha shape vertices run the following line.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"meshscatter!(sc_scene, alphaverts, markersize = 0.4, color = :green)","category":"page"},{"location":"alphashape/#Get-the-surface-area-of-the-alpha-shape.","page":"Mesh","title":"Get the surface area of the alpha shape.","text":"","category":"section"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Define a function to get the surface area of a set of coordinates and connectivity. The surface area changes when the alpha value or atom radius is changed.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"using Meshes\nfunction surfacearea(coordinates, connectivity)\n    totalarea = 0.0\n    for i = 1:size(connectivity,1)\n        totalarea += measure(Ngon(Meshes.Point3.(coordinates[connectivity[i,1],:],\n                        coordinates[connectivity[i,2],:], coordinates[connectivity[i,3],:])))\n    end\n    return totalarea\nend\nsurfarea = @lift surfacearea($spnts, $(proteinshape)[3])\nsurfatext = layout[2,7:9] = Label(fig, text = lift(X->string(\"surface area = \", round(Int64, X), \"  Å²\"), surfarea), fontsize = 22)","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"Save the figure as a png file.","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"save(\"alphashape.png\", fig)","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"(Image: alphashape)","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"","category":"page"},{"location":"alphashape/","page":"Mesh","title":"Mesh","text":"This page was generated using Literate.jl.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"EditURL = \"mutation.jl\"","category":"page"},{"location":"mutation/#ProtoSyn-Protein-Mutation","page":"Mutation","title":"ProtoSyn Protein Mutation","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"In this demo we can use ProtoSyn to mutate amino acids. Different rotamers can be selected for the mutated residue. To use ProtoSyn you currently have to use a workaround.","category":"page"},{"location":"mutation/#Load-BioMakie-and-ProtoSyn","page":"Mutation","title":"Load BioMakie and ProtoSyn","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"Download the protosyn source code from the src directory of BioMakie and include it. This should install a few packages (SplitApplyCombine, Colors, Meshes, GeometryBasics, OrderedCollections, Distances) and then import ProtoSyn.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"using BioMakie\nusing GLMakie\n\nBioMakie.getprotosyn()\ninclude(\"protosyn.jl\")","category":"page"},{"location":"mutation/#Prepare-the-structure","page":"Mutation","title":"Prepare the structure","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"To simplify things, we will load a structure with BioStructures and save chain \"A\" as a PDB file. Then we will load the PDB file with ProtoSyn.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"using BioStructures\nstruc = retrievepdb(\"2vb1\")\nchn = collectresidues(struc[1][\"A\"], standardselector)\nwritepdb(\"2vb1x.pdb\", chn)\n\npose = ProtoSyn.Peptides.load(\"2vb1x.pdb\"; bonds_by_distance=true) |> Observable","category":"page"},{"location":"mutation/#Get-plotting-data-for-the-Pose-and-plot-it","page":"Mutation","title":"Get plotting data for the Pose and plot it","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"pdata = plottingdata(pose)\nfig = Figure()\n_plotstruc!(fig, pdata)","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"(Image: wildtypearg)","category":"page"},{"location":"mutation/#Prepare-the-structure-2","page":"Mutation","title":"Prepare the structure","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"We can use diagnose to get an idea of what is missing and of inconsistencies in the structure.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"ProtoSyn.Peptides.diagnose(pose[])","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"We have several issues, including charges, naming, and caps, which are the terminal hydrogens. We can use the following functions to address these issues. First we load the library of amino acids, to get the Peptide/protein-specific data, instead of the default generic data.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"res_lib = ProtoSyn.load_grammar_from_file(ProtoSyn.resource_dir*\"/Peptides/grammars.yml\", \"default\")\nProtoSyn.Peptides.cap!(pose[])\nProtoSyn.Peptides.assign_default_atom_names!(pose[])\nProtoSyn.sort_atoms_by_graph!(pose[])\nProtoSyn.Peptides.Calculators.Electrostatics.assign_default_charges!(pose[], res_lib)\n\nProtoSyn.Peptides.diagnose(pose[])","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"Now the issues should say OK, except for the atom-level graph. We can ignore this for now. This fixpose! function below may be convenient for syncing and correcting the structure after making changes. Using pose[] = pose[] can force Makie to update the pose/figure.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"function fixpose!(pose::Observable; res_lib=ProtoSyn.load_grammar_from_file(ProtoSyn.resource_dir*\"/Peptides/grammars.yml\", \"default\"))\n    ProtoSyn.Peptides.cap!(pose[])\n    ProtoSyn.Peptides.assign_default_atom_names!(pose[])\n    ProtoSyn.sort_atoms_by_graph!(pose[])\n    ProtoSyn.Calculators.Electrostatics.assign_default_charges!(pose[],res_lib)\n    ProtoSyn.Peptides.sync!(pose[])\n    pose[] = pose[]\nend","category":"page"},{"location":"mutation/#Mutate-the-structure","page":"Mutation","title":"Mutate the structure","text":"","category":"section"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"Get information about a residue. In this example we will use residue 128 because it is easy to find on the structure. The long side chain of this arginine extends outward the furthest.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"pose[].graph[1][128]","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"Next lets try mutating it to tyrosine. We can use the mutate! function to do this. Combine it with fixpose! to get the updated structure. You should see the side chain change into the phenol ring of tyrosine.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"ProtoSyn.Peptides.mutate!(pose[], pose[].graph[1][128], res_lib, seq\"Y\")\nfixpose!(pose)","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"(Image: mutanttyr)","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"To choose different rotamers/orientations, we can use the rotamer library. ProtoSyn provides a stack of the most likely rotamers based on the dihedral angles of the residue.","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"rot_lib = ProtoSyn.Peptides.load_dunbrack()\nphi = ProtoSyn.getdihedral(pose[].state, ProtoSyn.Peptides.phi(pose[].graph[1][128]))\npsi = ProtoSyn.getdihedral(pose[].state, ProtoSyn.Peptides.psi(pose[].graph[1][128]))\nstack = rot_lib[\"TYR\"][phi, psi]\n\nProtoSyn.Peptides.apply!(pose[].state, stack[3], pose[].graph[1][128])\nfixpose!(pose)","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"(Image: mutanttyrrotamer)","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"","category":"page"},{"location":"mutation/","page":"Mutation","title":"Mutation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"EditURL = \"<unknown>/docs/src/Examples/alphashape.jl\"","category":"page"},{"location":"Examples/alphashape/#Alpha-shape-of-a-protein","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"","category":"section"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"using BioMakie\nusing GLMakie\nusing GLMakie: Slider\nusing SplitApplyCombine\nusing GeometryBasics\nusing BioStructures","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"SciPy and NumPy are required for this alpha shape algorithm. They need to be installed in your Conda/Python environment.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"using PyCall\nusing Conda\nscipy = pyimport(\"scipy\")\nnp = pyimport(\"numpy\")\ncollections = pyimport(\"collections\")","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Define the alpha shape algorithm.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"py\"\"\"\n    from scipy.spatial import Delaunay\n    import numpy as np\n    from collections import defaultdict\n\n    def alpha_shape_3D(pos, alpha):\n        tetra = Delaunay(pos)\n        tetrapos = np.take(pos,tetra.simplices,axis=0)\n        normsq = np.sum(tetrapos**2,axis=2)[:,:,None]\n        ones = np.ones((tetrapos.shape[0],tetrapos.shape[1],1))\n        a = np.linalg.det(np.concatenate((tetrapos,ones),axis=2))\n        Dx = np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[1,2]],ones),axis=2))\n        Dy = -np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[0,2]],ones),axis=2))\n        Dz = np.linalg.det(np.concatenate((normsq,tetrapos[:,:,[0,1]],ones),axis=2))\n        c = np.linalg.det(np.concatenate((normsq,tetrapos),axis=2))\n        r = np.sqrt(Dx**2+Dy**2+Dz**2-4*a*c)/(2*np.abs(a))\n        tetras = tetra.simplices[r<alpha,:]\n        TriComb = np.array([(0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3)])\n        Triangles = tetras[:,TriComb].reshape(-1,3)\n        Triangles = np.sort(Triangles,axis=1)\n        TrianglesDict = defaultdict(int)\n        for tri in Triangles:\n            TrianglesDict[tuple(tri)] += 1\n        Triangles=np.array([tri for tri in TrianglesDict if TrianglesDict[tri] ==1])\n        EdgeComb=np.array([(0, 1), (0, 2), (1, 2)])\n        Edges=Triangles[:,EdgeComb].reshape(-1,2)\n        Edges=np.sort(Edges,axis=1)\n        Edges=np.unique(Edges,axis=0)\n        Vertices = np.unique(Edges)\n        return Vertices,Edges,Triangles\n    \"\"\"","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Define a function to get the alpha shape of a set of coordinates.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"indexshift(idxs) = (idxs).+=1   # Python is base 0 and Julia is base 1\nfunction getalphashape(coords::Matrix, alpha::T) where {T<:Real}\n    verts,edges,tris = py\"alpha_shape_3D($(coords),$(alpha))\"\n    return [indexshift(verts),indexshift(edges),indexshift(tris)]\nend","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Define a function to get points from spheres at a given radius around coordinates and a function to get line segments from a set of coordinates.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"function getspherepoints(cords::Matrix, radius::Real)\n\tpnts = [GeometryBasics.Point{3,Float64}(cords[i,:]) for i in 1:size(cords,1)] |> Observable\n\tspheres = GeometryBasics.Point{3,Float64}[]\n\n\tlift(pnts) do p\n\t\tfor i in 1:size(p,1)\n\t\t\tsp = GeometryBasics.decompose(GeometryBasics.Point{3,Float64},GeometryBasics.Sphere(p[i],radius),4) |> unique\n\t\t\tfor ii in 1:size(sp,1)\n\t\t\t\tpush!(spheres,sp[ii])\n\t\t\tend\n\t\tend\n\tend\n\n\treturn [[spheres[i].data...] for i in 1:size(spheres,1)] |> combinedims |> transpose |> collect\nend\nfunction linesegs(arr::AbstractArray{T,3}) where T<:AbstractFloat\n    new_arr::AbstractArray{Point3f0} = []\n    for i in 1:size(arr,1)\n        push!(new_arr, Makie.Point3f0(arr[i,1,:]))\n        push!(new_arr, Makie.Point3f0(arr[i,2,:]))\n    end\n    return new_arr |> combinedims |> transpose |> collect\nend","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Load the structure with BioStructures.jl and get a coordinates Observable. Then set up the Figure and Layout.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"struc = retrievepdb(\"2vb1\")\natms = collectatoms(struc, standardselector) |> Observable\ncords = @lift coordarray($atms)' |> collect\nfig = Figure(resolution = (800,600))\nlayout = fig[1,1] = GridLayout(10, 9)","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Add text and interactive elements. It can be helpful to run this line by line to see what is happening.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"strucname = struc.name[1:4]\nsc_scene = layout[1:10,1:6] = LScene(fig; show_axis = false)\nstructxt = layout[1,7:8] = Label(fig, text = \"Structure ID:  $(strucname)\", fontsize = 35)\nalpha1 = layout[5,7:9] = Slider(fig, range = 1.5:0.5:9.0, startvalue = 2.5)\nalphatxt1 = lift(alpha1.value) do s1; string(\"alpha = \", round(s1, sigdigits = 2)); end\nalphatext = layout[4,7:9] = Label(fig, text = alphatxt1, fontsize = 22)\nalphaval = alpha1.value\nradii1 = layout[7,7:9] = Slider(fig, range = 1.5:0.5:9.0, startvalue = 2.5)\nradiixt1 = lift(radii1.value) do s1; string(\"atom radius = \", round(s1, sigdigits = 2)); end\nradiitext = layout[6,7:9] = Label(fig, text = radiixt1, fontsize = 22)\nradiival = radii1.value","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Get the alpha shape of the structure.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"spnts = @lift getspherepoints($cords,$radiival)\nproteinshape = @lift let pnts = $spnts; getalphashape(pnts,$alphaval); end\nalphaverts = @lift $spnts[$(proteinshape)[1],:]\nalphaedges = @lift $spnts[$(proteinshape)[2],:] |> linesegs","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Finally, plot the shape. Moving the sliders will update the plot, but it is slow. You may want to click on the slider rather than dragging it. Speed may be improved in the future.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"linesegments!(sc_scene, alphaedges, color = :gray, transparency = true)","category":"page"},{"location":"Examples/alphashape/#Optional/additional-stuff","page":"Alpha shape of a protein","title":"Optional/additional stuff","text":"","category":"section"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"#To show where the atoms are run the following line.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"meshscatter!(sc_scene, cords, markersize = 0.4, color = :blue)","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"#To show the alpha shape vertices run the following line.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"meshscatter!(sc_scene, alphaverts, markersize = 0.4, color = :green)","category":"page"},{"location":"Examples/alphashape/#Get-the-surface-area-of-the-alpha-shape.","page":"Alpha shape of a protein","title":"Get the surface area of the alpha shape.","text":"","category":"section"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Define a function to get the surface area of a set of coordinates and connectivity. The surface area changes when the alpha value or atom radius is changed.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"using Meshes\nfunction surfacearea(coordinates, connectivity)\n    totalarea = 0.0\n    for i = 1:size(connectivity,1)\n        totalarea += measure(Ngon(Meshes.Point3.(coordinates[connectivity[i,1],:],\n                        coordinates[connectivity[i,2],:], coordinates[connectivity[i,3],:])))\n    end\n    return totalarea\nend\nsurfarea = @lift surfacearea($spnts, $(proteinshape)[3])\nsurfatext = layout[2,7:9] = Label(fig, text = lift(X->string(\"surface area = \", round(Int64, X), \"  Å²\"), surfarea), fontsize = 22)","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"Save the figure as a png file.","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"save(\"alphashape.png\", fig)","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"(Image: alphashape)","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"","category":"page"},{"location":"Examples/alphashape/","page":"Alpha shape of a protein","title":"Alpha shape of a protein","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"EditURL = \"https://github.com/kool7d/BioMakie.jl/blob/dev/docs/src/index.jl\"","category":"page"},{"location":"#BioMakie.jl","page":"Home","title":"BioMakie.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides plotting functions for protein structures, multiple sequence alignments, and some other related plots like protein structure contact maps.","category":"page"},{"location":"","page":"Home","title":"Home","text":"So far, plotting methods exist for packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"BioStructures.jl\nMIToS.jl\nFastaIO.jl\nFASTX.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other packages with plotting methods in development:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MolecularGraph.jl\nProtoSyn.jl","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Enter the package mode by pressing ] and run add BioMakie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/#BioMakie-API","page":"API","title":"BioMakie API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/","page":"API","title":"API","text":"Modules = [BioMakie]","category":"page"},{"location":"API/#BioMakie.UniProtData","page":"API","title":"BioMakie.UniProtData","text":"UniProtData::DataType\n\nA struct containing all the information from a UniProt entry.\n\nGeneral information\n\naccession id protinfo gene genesynonyms secondaryaccession sequence organism datainfo\n\nFeatures\n\nmoleculeprocessing domainsandsites structural ptm sequenceinformation mutagenesis variants topology other_features\n\nComments\n\nfunc catalyticactivity subunit subcellularlocation interaction tissuespecificity polymorphism allergen webresource similarity miscellaneous other_comments\n\nDatabase references (EMBL, PDB, etc.)\n\ndbrefs\n\n\n\n\n\n","category":"type"},{"location":"API/#BioMakie.atomcolors-Tuple{BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.atomcolors","text":"atomcolors( atoms )\n\nGet a Vector of colors for the atoms. To see all default element and amino acid colorschemes, use getbiocolors(). Keyword argument colors takes a Dict which maps element to color. (\"C\" => :red)\n\nThis function uses 'MIToS.PDB.bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\ncolors –- elecolors | Options - elecolors, aquacolors\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.atomradii-Union{Tuple{Vector{T}}, Tuple{T}} where T<:BioStructures.AbstractAtom","page":"API","title":"BioMakie.atomradii","text":"atomradii( atoms )\n\nCollect atom radii based on element for plotting.\n\nKeyword Arguments:\n\nradiustype –- :ballandstick | Options - :cov, :covalent, :vdw, :vanderwaals, :bas, :ballandstick, :spacefilling\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.atomradius-Tuple{T} where T<:BioStructures.AbstractAtom","page":"API","title":"BioMakie.atomradius","text":"atomradius( atom )\n\nCollect atom radius based on element for plotting.\n\nKeyword Arguments:\n\nradiustype –- :ballandstick | Options - :cov, :covalent, :vdw, :vanderwaals, :bas, :ballandstick, :spacefilling\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.atomsizes-Tuple{BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.atomsizes","text":"atomsizes( atms )\n\nGet a Vector of sizes for the atoms from a BioStructures.StructuralElementOrList.\n\nThis function uses 'MIToS.PDB.bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\nradiustype –- :ballandstick | Options - :cov, :covalent, :vdw, :vanderwaals, :bas, :ballandstick, :spacefilling\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.backbonebonds-Tuple{BioStructures.Chain}","page":"API","title":"BioMakie.backbonebonds","text":"backbonebonds( chn::BioStructures.Chain ) -> BitMatrix\n\nReturns a matrix of backbone bonds in chn, where Mat[i,j] = 1 if atoms i and j are bonded. \n\nKeyword Arguments:\n\ncutoff –––––- 1.6\t\t# distance cutoff for bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.bondshape-Union{Tuple{Tuple{T}}, Tuple{T}} where T<:BioStructures.AbstractAtom","page":"API","title":"BioMakie.bondshape","text":"bondshape( twoatoms )\nbondshape( twopoints )\n\nReturns a (mesh) cylinder between two atoms or atomic coordinates.\n\nKeyword Arguments:\n\nbondwidth ––––––- 0.2\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.bondshapes-Tuple{BioStructures.Chain}","page":"API","title":"BioMakie.bondshapes","text":"bondshapes( structure )\nbondshapes( residues )\nbondshapes( coordinates )\nbondshapes( structure, bondmatrix )\nbondshapes( residues, bondmatrix )\nbondshapes( coordinates, bondmatrix )\n\nReturns a (mesh) cylinder between two atoms or points.\n\nKeyword Arguments:\n\nalgo ––––––––– :knowledgebased | :distance, :covalent\t# unless bondmatrix is given\ndistance ––––––– 1.9\t\t\t\t\t\t\t\t\t\t# unless bondmatrix is given\nbondwidth ––––––- 0.2\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.covalentbonds-Union{Tuple{Vector{T}}, Tuple{T}} where T<:BioStructures.AbstractAtom","page":"API","title":"BioMakie.covalentbonds","text":"covalentbonds( atms ) -> BitMatrix\n\nReturns a matrix of all bonds in atms, where Mat[i,j] = 1 if atoms i and j are bonded. \n\nThis function uses 'bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\nextradistance –– 0.14  # fudge factor for better inclusion\nH –––––––– true  # include bonds with hydrogen atoms\ndisulfides –––- false # include disulfide bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.distancebonds-Union{Tuple{Vector{T}}, Tuple{T}} where T<:BioStructures.AbstractAtom","page":"API","title":"BioMakie.distancebonds","text":"distancebonds( atms ) -> BitMatrix\n\nReturns a matrix of all bonds in atms, where Mat[i,j] = 1 if atoms i and j are bonded. \n\nThis function uses 'bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\ncutoff –––––- 1.9   # distance cutoff for bonds between heavy atoms\nhydrogencutoff –- 1.14  # distance cutoff for bonds with hydrogen atoms\nH –––––––– true  # include bonds with hydrogen atoms\ndisulfides –––- false # include disulfide bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.firstlabel-Tuple{Function}","page":"API","title":"BioMakie.firstlabel","text":"firstlabel( inspectorfunc::Function )\n\nShow an example of the inspector label function looks like. The position p will not be available to this function, so it will be set to nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.getbonds-Tuple{BioStructures.Chain, Vararg{Any}}","page":"API","title":"BioMakie.getbonds","text":"getbonds( chn::BioStructures.Chain, selectors... ) -> BitMatrix\ngetbonds( modl::BioStructures.Model, selectors... ) -> BitMatrix\ngetbonds( struc::BioStructures.ProteinStructure, selectors... ) -> BitMatrix\n\nReturns a matrix of all bonds in chn, where Mat[i,j] = 1 if atoms i and j are bonded. \n\nThis function uses 'bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\nalgo ––––––- :knowledgebased \t# (:distance, :covalent) algorithm to find bonds\nH –––––––– true\t\t\t\t# include bonds with hydrogen atoms\ncutoff –––––- 1.9\t\t\t\t# distance cutoff for bonds between heavy atoms\nextradistance –– 0.14\t\t\t\t# fudge factor for better inclusion\ndisulfides –––- false\t\t\t\t# include disulfide bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.getbonds-Tuple{Vector{MIToS.PDB.PDBResidue}}","page":"API","title":"BioMakie.getbonds","text":"getbonds( residues ) -> BitMatrix\n\nReturns a matrix of all bonds in residues::Vector{MIToS.PDB.PDBResidue},  where Mat[i,j] = 1 if atoms i and j are bonded.\n\nKeyword Arguments:\n\nalgo ––––––- :knowledgebased \t# (:distance, :covalent) algorithm to find bonds\nH –––––––– true\t\t\t\t# include bonds with hydrogen atoms\ncutoff –––––- 1.9\t\t\t\t# distance cutoff for bonds between heavy atoms\nextradistance –– 0.14\t\t\t\t# fudge factor for better inclusion\ndisulfides –––- false\t\t\t\t# include disulfide bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.getbonds-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T<:AbstractFloat","page":"API","title":"BioMakie.getbonds","text":"getbonds( coords ) -> BitMatrix\n\nReturns a matrix of all bonds using a N x 3 coordinates matrix. Uses a plain cutoff distance with algo option :distance. This is not recommended as it can lead to incorrect results since different  atoms have different bond lengths and radii.\n\nKeyword Arguments:\n\nalgo ––––––- :distance \t\t\t# algorithm to find bonds\nH –––––––– true\t\t\t\t# include bonds with hydrogen atoms\ncutoff –––––- 1.9\t\t\t\t# distance cutoff for bonds between heavy atoms\nextradistance –– 0.14\t\t\t\t# fudge factor for better inclusion\ndisulfides –––- false\t\t\t\t# include disulfide bonds\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.getinspectorlabel-Tuple{BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.getinspectorlabel","text":"getinspectorlabel( structure )\ngetinspectorlabel( residues )\ngetinspectorlabel( atom )\n\nGet the inspector label function for plotting a 'StructuralElementOrList'.\n\nThis function uses 'MIToS.PDB.bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.getuniprotdata-Tuple{Any}","page":"API","title":"BioMakie.getuniprotdata","text":"getuniprotdata(jsonfile; include_refs = false)\n\nReads a UniProt JSON file and returns a UniProtData struct.\n\nKeyword  Arguments:\n\ninclude_refs::Bool = false    Whether to include allthe database references (EMBL, PDB, etc.) in the struct.                               can be very large, so it is false by default.\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.msavalues","page":"API","title":"BioMakie.msavalues","text":"msavalues( msa::AbstractMatrix, resdict::AbstractDict )::Matrix{Real}\n\nReturns a matrix of numbers according to the given dictionary, where keys are residue letters and values are numbers. This matrix is used as input for plotmsa for the heatmap colors of the residue positions. \n\nDefault values for residue letters are from Kidera Factor values.  From: Kenta Nakai, Akinori Kidera, Minoru Kanehisa, Cluster analysis of amino acid indices  for prediction of protein structure and function, Protein Engineering, Design and Selection,  Volume 2, Issue 2, July 1988, Pages 93–100, https://doi.org/10.1093/protein/2.2.93 \n\nkf 2 is Kidera Factor 2 (size/volume-related). The KF dictionary is in utils.jl, or you can look at the kideradict variable.\n\nKeyword Arguments:\n\nresdict –––- kideradict by default, alternatively give a Dict{String,Vector{Float}}\nkf –––––– 2 by default, alternatively give an integer from 1:10\n\n\n\n\n\n","category":"function"},{"location":"API/#BioMakie.plotmsa!-Union{Tuple{T}, Tuple{Makie.Figure, T}} where T<:Union{Vector{Tuple{String, String}}, Vector{FASTX.FASTA.Record}, MIToS.MSA.AbstractMultipleSequenceAlignment}","page":"API","title":"BioMakie.plotmsa!","text":"plotmsa!( fig, msa )\n\nPlot a multiple sequence alignment (MSA) into a Figure. \n\nExample\n\nfig = Figure(resolution = (1100, 400))\n\nplotmsa!( fig::Figure, msa::T; kwargs... ) where {T<:Union{MSA.AbstractMultipleSequenceAlignment,\n\t\t\t\t\t\t\t\t\t\t\t   Vector{Tuple{String,String}},\n\t\t\t\t\t\t\t\t\t\t\t   Vector{FASTX.FASTA.Record}}}\n\nKeyword Arguments:\n\nsheetsize ––- [40,20]\ngridposition – (1,1)\nmarkersize –– 12\ncolorscheme –- :buda\nmarkercolor –- :black\nxticklabelsize - 11\nyticklabelsize - 11\nresolution ––- (700,300)\nkwargs...   \t\t\t\t\t# forwarded to scatter plot\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.plotmsa-Tuple{Any}","page":"API","title":"BioMakie.plotmsa","text":"plotmsa( msa )\nplotmsa( plotdata )\n\nPlot a multiple sequence alignment (MSA). Returns a Figure, or a Figure and Observables for interaction. \n\nExamples\n\nMIToS.Pfam.downloadpfam(\"PF00062\")\t# download PF00062 MSA\nmsa = MIToS.MSA.read(\"PF00062.stockholm.gz\", Stockholm, \n\t\t\t\t\tgeneratemapping =true, useidcoordinates=true)\n\nplotmsa( msa; kwargs... )\n\nKeyword Arguments:\n\nfigresolution ––- (1000,350)\t# because resolution applies to the MSA plot\nsheetsize ––––- [40,20]\ngridposition ––– (1,1:3)\ncolorscheme –––- :buda\nmarkersize –––– 12\nmarkercolor –––- :black\nxticklabelsize –– 11\nyticklabelsize –– 11\nkwargs...    \t\t\t\t\t\t# forwarded to scatter plot\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.plotstruc!-Union{Tuple{T}, Tuple{Makie.Figure, T}} where T<:Union{Vector{MIToS.PDB.PDBAtom}, Vector{MIToS.PDB.PDBResidue}, BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.plotstruc!","text":"plotstruc!( fig, structure )\nplotstruc!( gridposition, structure )\nplotstruc!( fig, plotdata )\nplotstruc!( gridposition, plotdata )\n\nPlot a protein structure(/chain/residues/atoms) into a Figure. \n\nExamples\n\nfig = Figure()\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"2vb1\")\nstruc = MIToS.PDB.read(pdbfile, PDBML) |> Observable\nstrucplot = plotstruc!(fig, struc)\n\nchain_A = @residues struc model \"1\" chain \"A\" group \"ATOM\" residue All\nstrucplot = plotstruc!(fig, chain_A)\n\nchnatms = @atoms struc model \"1\" chain \"A\" group \"ATOM\" residue All atom All\nstrucplot = plotstruc!(fig, chnatms)\n-------------------------\nusing BioStructures\n\nstruc = retrievepdb(\"2vb1\", dir = \"data/\") |> Observable\nstrucplot = plotstruc!(fig, struc)\n\nstruc = read(\"data/2vb1_mutant1.pdb\", BioStructures.PDB) |> Observable\nstrucplot = plotstruc!(fig, struc)\n\nchain_A = retrievepdb(\"2vb1\", dir = \"data/\")[\"A\"] |> Observable\nstrucplot = plotstruc!(fig, chain_A)\n\nKeyword Arguments:\n\nresolution ––- (600,600)\ngridposition –- (1,1)  # if an MSA is already plotted, (2,1:3) works well\nplottype –––- :ballandstick, :covalent, or :spacefilling\natomcolors ––- elecolors, others in getbiocolors(), or provide a Dict like: \"N\" => :blue\nmarkersize ––- 0.0\nmarkerscale –– 1.0\nbondtype –––- :knowledgebased, :covalent, or :distance\ndistance –––- 1.9  # distance cutoff for covalent bonds\ninspectorlabel - :default, or define your own function like: (self, i, p) -> \"atom: ... coords: ...\"\nwater ––––– false  # show water molecules\nkwargs... ––– keyword arguments passed to the atom meshscatter\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.plotstruc-Tuple{Any}","page":"API","title":"BioMakie.plotstruc","text":"plotstruc( structure )\nplotstruc( residues )\nplotstruc( plotdata )\n\nCreate and return a Makie Figure for a protein structural element. \n\nExamples\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"2vb1\")\nstruc = MIToS.PDB.read(pdbfile, PDBML) |> Observable\nstrucplot = plotstruc(struc)\n\nchain_A = @residues struc model \"1\" chain \"A\" group \"ATOM\" residue All\nstrucplot = plotstruc(chain_A)\n\nchnatms = @atoms struc model \"1\" chain \"A\" group \"ATOM\" residue All atom All\nstrucplot = plotstruc(chnatms)\n-------------------------\nusing BioStructures\n\nstruc = retrievepdb(\"2vb1\", dir = \"data/\") |> Observable\nstrucplot = plotstruc(struc)\n\nstruc = read(\"data/2vb1_mutant1.pdb\", BioStructures.PDB) |> Observable\nstrucplot = plotstruc(struc)\n\nchain_A = retrievepdb(\"2hhb\", dir = \"data/\")[\"A\"] |> Observable\nstrucplot = plotstruc(chain_A)\n\nKeyword Arguments:\n\nfigresolution – (600,600)    # because resolution applies to the plot\nresolution ––- (600,600)\ngridposition –- (1,1)        # if an MSA is already plotted, (2,1:3) works well\nplottype –––- :ballandstick, :covalent, or :spacefilling\natomcolors ––- elecolors, others in getbiocolors(), or provide a Dict like: \"N\" => :blue\nmarkersize ––- 0.0\nmarkerscale –– 1.0\nbondtype –––- :knowledgebased, :covalent, or :distance\ndistance –––- 1.9  # distance cutoff for covalent bonds\ninspectorlabel - :default, or define your own function like: (self, i, p) -> \"atom: ... coords: ...\"\nwater ––––– false  # show water molecules\nkwargs... ––– keyword arguments passed to the atom meshscatter\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.plottingdata-Tuple{BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.plottingdata","text":"plottingdata( structure )\nplottingdata( residues )\nplottingdata( atoms )\n\nThis function returns an OrderedDict of the main data used for plotting.  This function uses 'MIToS.PDB.bestoccupancy' or 'defaultatom' to ensure only one position per atom. By default the kwarg 'water' is set to false, so water molecules are not included.\n\nReturns:\n\nOrderedDict(:atoms => ..., \n            :coords => ..., \n            :colors => ...,\n            :sizes => ...,\n            :bonds => ...)\n\nKeyword Arguments:\n\ncolors –––- elecolors      | Options - elecolors, aquacolors, shapelycolors, maecolors\nradiustype –- :ballandstick  | Options - :cov, :covalent, :vdw, :vanderwaals, :bas, :ballandstick, :spacefilling\nwater –––– false          | Options - true, false\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.plottingdata-Tuple{MIToS.MSA.AbstractMultipleSequenceAlignment}","page":"API","title":"BioMakie.plottingdata","text":"plottingdata( msa )\n\nCollects data for plotting (residue string matrix, matrix heatmap values,  x labels, and y labels) from a multiple sequence alignment (MSA) object. \n\nThe MSA object can be a: \n\nAbstractMultipleSequenceAlignment from MIToS.MSA, \nvector of tuples 'Vector{Tuple{String,String}}' from FastaIO, \nvector of FASTA records 'Vector{FASTX.FASTA.Record}' from FASTX.\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.rescolors-Tuple{BioStructures.StructuralElementOrList}","page":"API","title":"BioMakie.rescolors","text":"rescolors( residues )\n\nGet a Vector of colors for the atoms. To see all default element and amino acid colorschemes, use getbiocolors(). Keyword argument colors takes a Dict which maps residue to color. (\"C\" => :red)\n\nThis function uses 'MIToS.PDB.bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\ncolors –- elecolors | Options - elecolors, aquacolors, shapelycolors, maecolors\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.showuniprotdata-Tuple{Any, Any}","page":"API","title":"BioMakie.showuniprotdata","text":"showuniprotdata(pdata)\n\nPrints some of the most important information from a UniProtData object.\n\n\n\n\n\n","category":"method"},{"location":"API/#BioMakie.sidechainbonds-Tuple{BioStructures.AbstractResidue, Vararg{Any}}","page":"API","title":"BioMakie.sidechainbonds","text":"sidechainbonds( res::BioStructures.AbstractResidue, selectors... ) -> BitMatrix\n\nReturns a matrix of sidechain bonds in res, where Mat[i,j] = 1 if atoms i and j are bonded.\n\nThis function uses 'bestoccupancy' or 'defaultatom' to ensure only one position per atom.\n\nKeyword Arguments:\n\nalgo ––––––- :knowledgebased \t# (:distance, :covalent) algorithm to find bonds\nH –––––––– true\t\t\t\t# include bonds with hydrogen atoms\ncutoff –––––- 1.9\t\t\t\t# distance cutoff for bonds between heavy atoms\nextradistance –– 0.14\t\t\t\t# fudge factor for better inclusion\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap!-Tuple{Makie.Figure, BioStructures.ContactMap}","page":"API","title":"MakieCore.heatmap!","text":"heatmap!( fig, cmap; kwargs... )\n\nPlot a BioStructures contact map.\n\nExample\n\nfig = Figure()\n\nusing BioStructures\n\nstruc = retrievepdb(\"1IVO\")[1]\ncbetas_A = collectatoms(struc[\"A\"], cbetaselector)\ncbetas_B = collectatoms(struc[\"B\"], cbetaselector)\ncmap = ContactMap(cbetas_A, cbetas_B)\nheatmap!(fig, cmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :ice\nkwargs... ––––––– Keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap!-Tuple{Makie.Figure, BioStructures.DistanceMap}","page":"API","title":"MakieCore.heatmap!","text":"heatmap( dmap; kwargs... )\n\nPlot a BioStructures distance map.\n\nExample\n\nusing BioStructures\n\nstruc = retrievepdb(\"1IVO\")[1]\ncbetas_A = collectatoms(struc[\"A\"], cbetaselector)\ncbetas_B = collectatoms(struc[\"B\"], cbetaselector)\ndmap = DistanceMap(cbetas_A, cbetas_B)\nheatmap(dmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :viridis\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap!-Tuple{Makie.Figure, NamedArrays.NamedMatrix{Bool, PairwiseListMatrices.PairwiseListMatrix{Bool, false, Vector{Bool}}, Tuple{OrderedCollections.OrderedDict{String, Int64}, OrderedCollections.OrderedDict{String, Int64}}}}","page":"API","title":"MakieCore.heatmap!","text":"heatmap!( fig, cmap; kwargs... )\n\nPlot a MIToS contact map.\n\nExample:\n\nfig = Figure()\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"1IVO\", format=PDBFile)\nresidues_1ivo = read(pdbfile, PDBFile)\npdb = @residues residues_1ivo model \"1\" chain \"A\" group \"ATOM\" residue All\ncmap = contact(pdb, 8.0, criteria=\"CB\")\n\nheatmap!(fig, cmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :ice\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap!-Tuple{Makie.Figure, NamedArrays.NamedMatrix{Float64, PairwiseListMatrices.PairwiseListMatrix{Float64, false, Vector{Float64}}, Tuple{OrderedCollections.OrderedDict{String, Int64}, OrderedCollections.OrderedDict{String, Int64}}}}","page":"API","title":"MakieCore.heatmap!","text":"heatmap!( fig, dmap; kwargs... )\n\nPlot a MIToS distance map.\n\nExample\n\nfig = Figure()\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"1IVO\", format=PDBFile)\nresidues_1ivo = read(pdbfile, PDBFile)\npdb = @residues residues_1ivo model \"1\" chain \"A\" group \"ATOM\" residue All\ndmap = MIToS.PDB.distance(pdb, criteria=\"All\")\n\nheatmap!(fig, dmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :viridis\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap-Tuple{BioStructures.ContactMap}","page":"API","title":"MakieCore.heatmap","text":"heatmap( cmap; kwargs... )\n\nPlot a BioStructures contact map.\n\nExample\n\nusing BioStructures\n\nstruc = retrievepdb(\"1IVO\")[1]\ncbetas_A = collectatoms(struc[\"A\"], cbetaselector)\ncbetas_B = collectatoms(struc[\"B\"], cbetaselector)\ncmap = ContactMap(cbetas_A, cbetas_B)\nheatmap(cmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :ice\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap-Tuple{BioStructures.DistanceMap}","page":"API","title":"MakieCore.heatmap","text":"heatmap( dmap; kwargs... )\n\nPlot a BioStructures distance map.\n\nExample\n\nusing BioStructures\n\nstruc = retrievepdb(\"1IVO\")[1]\ncbetas_A = collectatoms(struc[\"A\"], cbetaselector)\ncbetas_B = collectatoms(struc[\"B\"], cbetaselector)\ndmap = DistanceMap(cbetas_A, cbetas_B)\nheatmap(dmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :viridis\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap-Tuple{NamedArrays.NamedMatrix{Bool, PairwiseListMatrices.PairwiseListMatrix{Bool, false, Vector{Bool}}, Tuple{OrderedCollections.OrderedDict{String, Int64}, OrderedCollections.OrderedDict{String, Int64}}}}","page":"API","title":"MakieCore.heatmap","text":"heatmap( cmap; kwargs... )\n\nPlot a MIToS contact map.\n\nExample:\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"1IVO\", format=PDBFile)\nresidues_1ivo = read(pdbfile, PDBFile)\npdb = @residues residues_1ivo model \"1\" chain \"A\" group \"ATOM\" residue All\ncmap = contact(pdb, 8.0, criteria=\"CB\")\n\nheatmap(cmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- Colormap to use\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"},{"location":"API/#MakieCore.heatmap-Tuple{NamedArrays.NamedMatrix{Float64, PairwiseListMatrices.PairwiseListMatrix{Float64, false, Vector{Float64}}, Tuple{OrderedCollections.OrderedDict{String, Int64}, OrderedCollections.OrderedDict{String, Int64}}}}","page":"API","title":"MakieCore.heatmap","text":"heatmap( dmap; kwargs... )\n\nPlot a MIToS distance map.\n\nExample\n\nusing MIToS.PDB\n\npdbfile = MIToS.PDB.downloadpdb(\"1IVO\", format=PDBFile)\nresidues_1ivo = read(pdbfile, PDBFile)\npdb = @residues residues_1ivo model \"1\" chain \"A\" group \"ATOM\" residue All\ndmap = MIToS.PDB.distance(pdb, criteria=\"All\")\n\nheatmap(dmap)\n\nKeyword Arguments:\n\nxlabel ––––––––- \"Item 2\"\nylabel ––––––––- \"Item 1\"\ncolormap –––––––- :viridis\nkwargs... ––––––– additional keyword arguments to pass to heatmap\n\n\n\n\n\n","category":"method"}]
}
